from controller import Robot, Motor, Camera, InertialUnit, GPS, Gyro, LED
from math import pow

# Define constants
CLAMP = lambda value, low, high: max(low, min(value, high))

# Constants for stabilization
k_vertical_thrust = 68.5
k_vertical_offset = 0.6
k_vertical_p = 3.0
k_roll_p = 50.0
k_pitch_p = 30.0

# Initialize robot and timestep
robot = Robot()
timestep = int(robot.getBasicTimeStep())

# Enable devices
camera = robot.getDevice("camera")
camera.enable(timestep)

front_left_led = robot.getDevice("front left led")
front_right_led = robot.getDevice("front right led")

imu = robot.getDevice("inertial unit")
imu.enable(timestep)

gps = robot.getDevice("gps")
gps.enable(timestep)

gyro = robot.getDevice("gyro")
gyro.enable(timestep)

camera_roll_motor = robot.getDevice("camera roll")
camera_pitch_motor = robot.getDevice("camera pitch")

# Initialize propeller motors
motors = [
    robot.getDevice("front left propeller"),
    robot.getDevice("front right propeller"),
    robot.getDevice("rear left propeller"),
    robot.getDevice("rear right propeller")
]

for motor in motors:
    motor.setPosition(float('inf'))
    motor.setVelocity(1.0)

# Target altitude
target_altitude = 0.5

# Main control loop
while robot.step(timestep) != -1:
    time_elapsed = robot.getTime()

    # Read center pixel color from camera
    image = camera.getImage()
    x, y = camera.getWidth() // 2, camera.getHeight() // 2
    r = camera.imageGetRed(image, camera.getWidth(), x, y)
    g = camera.imageGetGreen(image, camera.getWidth(), x, y)
    b = camera.imageGetBlue(image, camera.getWidth(), x, y)
    print(f"Center pixel RGB: ({r}, {g}, {b})")

    # Sensor readings
    roll, pitch, _ = imu.getRollPitchYaw()
    altitude = gps.getValues()[2]
    roll_velocity, pitch_velocity, _ = gyro.getValues()

    # LED blinking
    led_state = int(time_elapsed) % 2
    front_left_led.set(led_state)
    front_right_led.set(1 - led_state)

    # Stabilize camera
    camera_roll_motor.setPosition(-0.115 * roll_velocity)
    camera_pitch_motor.setPosition(-0.1 * pitch_velocity)

    # PID control inputs
    roll_input = k_roll_p * CLAMP(roll, -1.0, 1.0) + roll_velocity
    pitch_input = k_pitch_p * CLAMP(pitch, -1.0, 1.0) + pitch_velocity
    clamped_diff_alt = CLAMP(target_altitude - altitude + k_vertical_offset, -1.0, 1.0)
    vertical_input = k_vertical_p * pow(clamped_diff_alt, 3.0)

    # Motor control
    motor_inputs = [
        k_vertical_thrust + vertical_input - roll_input + pitch_input,  # Front left
        k_vertical_thrust + vertical_input + roll_input + pitch_input,  # Front right
        k_vertical_thrust + vertical_input - roll_input - pitch_input,  # Rear left
        k_vertical_thrust + vertical_input + roll_input - pitch_input   # Rear right
    ]

    motors[0].setVelocity(motor_inputs[0])
    motors[1].setVelocity(-motor_inputs[1])
    motors[2].setVelocity(-motor_inputs[2])
    motors[3].setVelocity(motor_inputs[3])

robot.cleanup()
