*Hands on #1:
Pause the current simulation by clicking on the Pause button  of the 3D view 
(see the user interface description to find out the buttons). 
The simulation is paused if the virtual time counter on the main toolbar is stopped. 
Create a new project from the File / New / New Project Directory... menu item and follow the instructions:

Name the project directory my_first_simulation instead of the proposed my_project.
Name the world file my_first_simulation.wbt instead of the proposed empty.wbt.
Click all the tick boxes, including the "Add a rectangle arena" which is not ticked by default

*Hands-on #2: Double-click on the RectangleArena node in the scene tree. This should open the node and display its fields.

Select the floorTileSize field and set its value to 0.25 0.25 instead of 0.5 0.5. 
You should see the effect immediately in the 3D view.
Select the wallHeight field and change its value to 0.05 instead of 0.1. The wall of the arena should now be lower.

*Hands-on #3: Double-click on the RectangleArena in the scene tree to close it and select it. 
Click on the Add button  at the top of the scene tree. 
In the open dialog box, choose PROTO nodes (Webots Projects) / objects / factory / containers / WoodenBox (Solid). 
A big box should appear in the middle of the arena. Double-click on it in the scene tree to open its fields.

Change its size to 0.1 0.1 0.1 instead of 0.6 0.6 0.6.
Change its translation to 0 0 0.05 instead of 0 0 0.3. Alternatively, you may use the blue arrow that appears in the 3D view to adjust its translation.z field.
Now shift-click and drag the box in the 3D view and move it in some corner of the arena.
Select the box and press ctrl-C, ctrl-V (Windows, Linux) or ⌘ command-C, ⌘ command-V (macOS) to copy and paste it. 
Shift-click and drag the new box to move it at some different location. Create a third box this way.
Move the boxes, so that no box is at the center of the arena. 
You may also use the blue rotation arrows to rotate the boxes along the vertical axis. 
This can be done also by shift-click and drag with the right mouse button. 
Alternatively, you can change the angle of the rotation field of the WoodenBox nodes in the scene tree.
Once you are satisfied with the result, save the world using the save button.

*Adding an E-puck Robot

Hands-on #4: Select the last node WoodenBox of the scene tree view. 
Click on the Add button  at the top of the scene tree view. 
In the dialog box, choose PROTO nodes (Webots Projects) / robots / gctronic / e-puck / E-puck (Robot). 
An e-puck robot should appear in the middle of the arena. 
Move and rotate this robot, the same way you did it with the boxes. 
Save the simulation and press the Run real-time button .

*Hands-on #5: Apply a force to the robot by pressing alt + left-click + drag (use the ⌥ option key on some Mac keyboards). 
On Linux, you should also press the ctrl key in addition to alt + left-click + drag. 
It is not possible to apply a force to a WoodenBox node, because by default, they have no mass and are considered as glued on the floor.
To enable physics on the WoodenBox nodes, you should set their mass field to a certain value (for example 0.2 kg). 
Once this is done, should be able to apply a force on them as well.

Hands-on #6: Pause the simulation and revert it. In the Scene Tree view, expand the WorldInfo node (the first node). 
Set its basicTimeStep field to 16. Then save the simulation.

--Creating new controller

*Hands-on #7: Create a new C (or any other language) controller called epuck_go_forward 
(for C++ and Java call it EPuckGoForward instead) using the File / New / New Robot Controller... menu item. 
This will create a new epuck_go_forward (or EPuckGoForward) directory in my_first_simulation/controllers. 
Select the option offering you to open the source file in the text editor.

*Hands on #8: In the scene tree view, select the controller field of the E-puck node, 
then use the field editor at the bottom of the Scene Tree view: press the Select... 
button and then select epuck_go_forward in the list. Once the controller is associated with the robot, save the world. 
Modify the program by getting the motor devices (leftMotor = robot.getDevice('left wheel motor')), 
and by applying a motor command (leftMotor.setPosition(10.0)):

from controller import Robot, Motor

TIME_STEP = 64

# create the Robot instance.
robot = Robot()

# get the motor devices
leftMotor = robot.getDevice('left wheel motor')
rightMotor = robot.getDevice('right wheel motor')
# set the target position of the motors
leftMotor.setPosition(10.0)
rightMotor.setPosition(10.0)

while robot.step(TIME_STEP) != -1:
   pass
Save the modified source code (File / Save Text File), reset and run the simulation.

--Extend the Controller to Speed Control

The robots wheels are often controlled using velocity, and not position like we did in the previous example. 
In order to control the motors of the wheels in speed you need to set the target position to the infinity and 
to set the desired speed:

from controller import Robot, DistanceSensor, Motor

# time in [ms] of a simulation step
TIME_STEP = 64

MAX_SPEED = 6.28

# create the Robot instance.
robot = Robot()

# initialize devices
ps = []
psNames = [
    'ps0', 'ps1', 'ps2', 'ps3',
    'ps4', 'ps5', 'ps6', 'ps7'
]

for i in range(8):
    ps.append(robot.getDevice(psNames[i]))
    ps[i].enable(TIME_STEP)

leftMotor = robot.getDevice('left wheel motor')
rightMotor = robot.getDevice('right wheel motor')
leftMotor.setPosition(float('inf'))
rightMotor.setPosition(float('inf'))
leftMotor.setVelocity(0.0)
rightMotor.setVelocity(0.0)

# feedback loop: step simulation until receiving an exit event
while robot.step(TIME_STEP) != -1:
    # read sensors outputs
    psValues = []
    for i in range(8):
        psValues.append(ps[i].getValue())

    # detect obstacles
    right_obstacle = psValues[0] > 80.0 or psValues[1] > 80.0 or psValues[2] > 80.0
    left_obstacle = psValues[5] > 80.0 or psValues[6] > 80.0 or psValues[7] > 80.0

    # initialize motor speeds at 50% of MAX_SPEED.
    leftSpeed  = 0.5 * MAX_SPEED
    rightSpeed = 0.5 * MAX_SPEED
    # modify speeds according to obstacles
    if left_obstacle:
        # turn right
        leftSpeed  = 0.5 * MAX_SPEED
        rightSpeed = -0.5 * MAX_SPEED
    elif right_obstacle:
        # turn left
        leftSpeed  = -0.5 * MAX_SPEED
        rightSpeed = 0.5 * MAX_SPEED
    # write actuators inputs
    leftMotor.setVelocity(leftSpeed)
    rightMotor.setVelocity(rightSpeed)